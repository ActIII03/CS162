Name: Armant Touche
Class: CS 163
Instructor: Karla Fant
Description: Program #2 Design

 For my stack abstract data type, the push function, pop, and peek will be present in the public section. Other abstract data type operations inlcude isEmpty and isFull which will check the most recent stack's capcity and in doing so, no pointers will need to passed through argument parameters. For my queue abstract data type, enqueue, dequeue, isEmpty, and peek will be present in the public section of the abstract data type class interface because like the stack abstract data type, no pointers will be passed through the argument parameters.
 I am going to describe the stack abstract data type's operations and the cases associated with each functions. For the push, a couple of cases to consider are enter no items, and trying to peek stack. I will check head for this cases becuase if a head is equal to null then I should return a non-zero integer to the calling routine which in our case, the client application will be the calling routine to catch the success or failure. Another function to consider is the pop function for a stack abstract data type. The pop will check, like push, to see if head is null because that signifies that the stack is empty and that there isn't anything to pop from. Another case to consider for pop is poping from a stack where the stack only has one item pushed onto it. This will require passing object up to the calling routine while decrementing the top index to zero which will cause the stack to be deleted and advance head to previous stack, if it exists. The peek function for the stack abstract data type, there are a couple cases to consider when peeking from the stack. The usually first case is trying to peek from a stack that is empty which will result non-zero integer return to the client program. In the client program, a message will display that the stack is either empty or something went wrong. This method will sheild the client from our client from having any type of interaction with the data structure. Data abstraction principle is be adhere'd to. Another case with the peek function would be etnering one item into our stack abstract data type, popping one item, and then trying to peek from the stack. Like the first case I mentioned with peek, this too would result in a returning a non-zero integer to the client program where there, I would display a message notfying the user that something went wrong. 
The other abstract data type data structure that will also be used in counjunction with our stack abstract data type is queue, using a circular linked list as the data structure associated with the queue abstract data type. The queue will contain two nodes where the first one will be the primary route and the other will be an alternative route. In each stack, there will be five queue objects, containing the primary and alternative route. Once the user is done with a leg of their trip, the queue object will be pushed to another stacked in the order of the pop. Leaving the user the choice of return in the same direction in which they travelled to their destination. Just like stacks, our queue abstract data type will have little amount of operations associated with it. Operations associated are enqueue and deque. Each will have wrapper function in public section of the qeueu abstract data type class and the private section, I will prototype and implement them recursively. The user won't have access to this abstract data type either which still adheres to data abstraction. All in all, I am ready to code it.
