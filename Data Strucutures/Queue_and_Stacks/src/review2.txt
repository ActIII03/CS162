Name: Armant Touche
Class: CS 163
Instructor: Karla Fant
Description: Program #2 Efficiency Write-up

	For this assignment, we were tasked with creating a repository for trip information, which along the way to a specific destination, we had to track both a primary route and alternative route. The abstract data types assigned to us were stacks and queues. The stack abstract data type, Karla assigned us linked list of dynamic arrays and for the queue abstract data type, we were to use two circular linked list of arrays. Both data structures were very straightforward to design and implement. I first started with the queue abstract data type seeing that the operations associated with client program, we had to insert the information into the circular linked list first and then dequeue and pop the information to the stack for the return trip. We also had to implement the typical operations for both of the abstract data types. For the queue abstract data type, the operations included: (1) enqueue (2) dequeue (3) peek (4) display. For the stack abstract data type, the operations included: (1) pop (2) push (3) peek (4) display. Both of the abstract data type operations were used by the client program and the common underlying data type was the routes-class where the information being tracked was: (1) street name (2) traffic status (3) distance (4) notes (5) source of information. As far efficiency goes, enqueueing was fairly efficient because enqueueing happened at the front of the circular linked list, resulting a run time performance of O(1) but when it came to dequeueing from the circular linked list, the performance suffered a bit. When dequeueing from the circular linked list, we had to traverse each time to the node before the rear in order to correctly dequeue from the rear and still not lost the other data items, resulting in run time performance of O(N) when N is the number of items in the circular linked list. The peek operation for the queue abstract data type was also very efficient because peek need access to the rear node, resulting in a run time performance of O(1). The display operation had a to traverse and had the same run time performance as dequeue. For the stack's operation efficiency, the push operation had direct access performance and so did the pop and peek operation. The display operation had to traverse each node in the linked list of arrays and loop through each node's arrays, resulting in a run time performance of O(N^2). Overall, I was satisfied with the data structure being assigned in this assignment.
	Would a different data structure worked better? Depends on what could've been better. As far as memory overhead goes, the linked-list approach could be costly if the number items become larger but the direct access benefits from some of the operations is an added plus. I do not think another data structure would've done better. I think the direct access was necessary for some of the operations in other abstract data types. If I had to be critical, for our stack's linear linked list of arrays, the full size could possibly not be fully utilized which can be a waste in memory but the latter is very nominal and doesn't have the memory of per se a doubly linked list where the extra pointers would be more costly.
	The overall design of and use of my data structure, I felt was solid seeing I ensured to check the typical cases associated with each operation of both abstract data types and such. I mentioned the efficiency before but if I had more time, I would check each for over-allocation because I think I rushed some of the allocation and may have not been frugal enough but valgrind says no memory leaks, so I am satisfied with my program and the overall design of it.


