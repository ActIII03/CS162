Name: Armant Touche
Class: CS 163
Instructor: Karla Fant
Description: Program #1 Design Write-up

    The functions needed for our ADT will be Add-a-new-room fucntion which will there will be a client class to handle the user's input and that room-name will be redirected to our ADT insert function in the public section. Like the Add-a-new-room function, Remove-a-room function will work similar. First, the user will input a desired room to be deleted to the client program and the client program will supply the ADT with the name to be searched for and deleted. Our Add-a-Accessory to a room will work similar with one level of deeper data abstraction. Once the user supplies the room name where the accessory will be inserted into, the ADT will since our LLL of rooms and once found, insert-accessory function, which will be located in the public section, will insert into the room node. Of course, ensuring no head pointers are passed via arguments in public functions. Display all accessories from a room will take in a room name and traverse till item is found and once found, a display-room's accessory function will be invoked but otherwise, return Boolean value to calling routine to message from the client program that item does not exist. Display all accessories from all rooms will traverse the room LLL and for each room, display all accessories corresponding to each room until we reached the end of the LLL of rooms. Remove a room and all the accessories corresponding to that room function will take in room string from the user. Traverse our LLL of rooms until room is found and if found, traverse the accessory LLL, removing from head till end of accessory list is reached. Once all accessories are deleted, then delete room from LLL of rooms. Removing an accessory from room function will take in room and accessory string from the user. We will traverse our LLL of rooms until found and once our room is found, traverse LLL of accessories until found and if found, delete it.
    With each function invocation, I will either supply the calling routine with a true Boolean-value if the intended effect is met but if the intended effect is not met, then I will return a false Boolean-value to the calling routine. In order for calling routine to evaluate result of the function call, I will either catch the result with a variable or have a conditional statement in where the the function call takes place in the statement. The calling routine will evaluate each return value and decide either to output a success message or failure message, depending on the return value within the client's program. To adhere to the ADT principles of separating the client program from the ADT, I will shield the ADT by having my getter-functions read in input from the user. Also, another aspect to consider is how the data is displayed. I will display within the ADT recursively, ensuring the recursive function is nested in the private section of the ADT list manager. For this program assignment, the data structure being assigned is not just one, but two linear linked list. One linked list will be a list of the room containing smart devices and it will need to be sorted alphabetically. Then for each room, their will be a linked list of accessories and it too, will be alphabetically sorted. The interface design for our ADT will use the struct-node approach. The nodes for the rooms will have a head pointer to the accessory-node linked list. The accessory-struct-node will contain dynamic character arrays that will store the information for the accessory. For the client interface, my underlying data type for the Smart-house will be class. I will have my getter-functions in that class.
