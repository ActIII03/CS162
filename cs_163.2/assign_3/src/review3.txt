Name: Armant Touche
Class: CS 163
Instructor: Karla Fant
Description: Program #3 Efficiency Write-up   

	Hash table worked well when retrieving data since hash table allows direct access but since it wasn’t sorted, this may not be ideal for data needing to be sorted. I like how hashing works with either integer data or character day and I find it interesting that having a hash table size be a prime number ensures uniqueness in inserting into the table. I also like the separate chaining because when first introduced to hash tables in lectures, my first question was how is data with the same index value work but chaining makes sense. Linear probing seems like a good secondary option but that comes with another problem which is what if the number of data items exceed the table size. I did not make a second table for hasihng with name because that seemed tedious but nonetheless, I think this data structure worked well with meal choice data.
	Honestly, if sorting was a requirement then I can understand that hash table wouldn’t be a good pick. After reading Carrano’s chapter on dictionaries, I realize this has awesome benefits for quick phone number retrieval for 911 dispatchers. Quick retrieval is nice but due to the amount of pointers required for the chaining, this may have high cost overhead which depending on the organization’s budget, the costs may not be suitable for their data needs. 
	Again, the quick retrieval of the data is the most efficient seeing that hashing produces a unique item and I choose to use the name of the floor plan as the keyword that corresponds to a particularly index value and implementing was definitely less of a headaches implementing versus stacks and queues and I didn’t have issue with displaying by location name even though I did not hash with the location name. 
	The fact I had to create helper functions for traversing the linked list may be inefficient due to the pointer memory requirements. I did implement some recursive function with my destructor’s which is efficient but the traversal, helper function made my program inefficient. I wonder what are the implicated costs associated with pointers. Wish there were real-world example of data structures being used or companies detailing what they used to store there data because I feel this abstract idea of data structure can have more value added to our lessons if we were exposed to some real world application versus being told that data structures are used everywhere. It would be cool to know how to calculate, mathematically, the algorithm efficiency of each and every function. 
	I think I implemented the correct functions for the requirements presented by Karla and I wouldn’t change anything about it. How come destructor’s aren’t taught with the lessons or in lab? I find it frustrating that data structures and there associated memory constructor/destructor aren’t emphasized as much but I guess with the amount of information presented to us, we(students) are sometimes left figuring to where to fill in the gaps in the teaching. There are a couple gaps in the lessons but I have noticed that these programs do not promote constructive feedback. I digress but I would like to spend more time on pointer arithmetic and coding code that requires less memory fetches. As I continue through the CS’s course, I hope good coding practices are taught more versus abstract ideas but who cares I guess. I am will try to over-deliver in my program assignments. I bet the algorithm efficiency of my LLL traversal, helper function may be costly in reference to memory because I am doing a a lot of fetches with iterative function.   
