Name: Armant Touche
Class: CS 163
Instructor: Karla Fant
Description: Program #4 Design Write-up
    
    In my public function section of the table class, I will have the add new node to root of tree for the first insertion instance. Add new node to tree will be another function in my table class. Remove node from tree is another function. Retrieve a specific entry from my BST. Return the height of the tree will be another function. Display in order will be a recursive function in my private section of table class. Delete all nodes matching location will be a function in my private section since I will be passing the header through the argument list like the display in order function previously stated. I will have a function to check how efficient my tree is meaning if it is balanced or not. Remove a meal by name will have a wrapper function that will call another function within my table class's private section that will recursively search for a single entry since meal is unique. I will also have a delete all node function equal to the supplied meal name from main in the client program. I will another class called venue for my client interface which have all of it's function in the public section. Add meal will be a function that deals with meal, name, price, rating, and type of venue. To copy will be another function in my venue class that will take Venue objects by reference. Display match will be a function that display one retrieved entry from my BST. Then I will have the same data members in the public section like program three.
    My "To Copy" function within my Venue class will check for a valid copy in order to prevent insert blank nodes in my BST. My "Is efficient" function will return a Boolean value to the calling routine within my client program. For my retrieve a single entry based on name will return a Boolean value to the calling routine. 
	The function I mentioned that will be in the private section of the table class will be receiving pointer from the public functions within the public, calling function within the table class. This will shield the user from having access to our ADT and more specifically, will shield the user from traversing our data structure. My retrieve function will not act as a display function but will call the a function from the client interface to make a shallow copy of each member of the Venue object and pass it back to the client program that display that object via the function within the client interface called display match. This action adheres to the ADT principle of information hiding.
	I will be using BST as my data structure and there are a couple of special cases to considered and to be more specific, my insertion, deletion of node matching a name, deletion of all nodes matching location, and both display functions. For my insertion function, I will have to considered if tree is empty or not because I cannot insert into a BST without having a root. I may be able to have just one insertion function that considered this case. Another case to considered will be my deletion of a single node matching a specific name. When deleting a single node, I will pay attention to the node’s a potential children because I do not want to have dangling pointers. The same goes for my delete all nodes matching a location. The two previous deletion function will have to considered the right and left pointers being set to NULL. This is an easy fix. Otherwise, there are a couple more cases to consider but I think since I haven’t fully implemented a BST, I will have to find out for myself.

