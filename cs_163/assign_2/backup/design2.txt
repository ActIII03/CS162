Name: Armant Touche
Class: CS 163
Instructor: Karla Fant
Assignment: Trivial Pursuit

    Program two will be Trivial Pursuit using Stacks and Queue data structures, where the stack will contain the "deck of cards" and the within each card there will be questions and of course answers. The questions and answers will be in a Circular Linked List and implemented as queue with enqueue for adding them from the text file and deque to peek at each question and answer corresponding with each card. The first thing to do is to build our Linked List of cards which later, we will be reading in a text file with: (1) Card Number (2) Suit. These members will be read into from our trivial pursuit class constructor and the head pointer will be stored in the trivial pursuit class. After creating an instance of trivial pursuit, the client program will go into a simple menu interface where the options for our game/program will be: (1) Play (2) Play Again (3) Quit. If player chooses play then our first card from our stack will be pop'd and the queue of questions will begin which we will have three questions. Player only needs to guess one question correctly and if they do answer correctly, then another stack will be initialize and this stack will our "Answered Correctly" stack. If the player gets an answer wrong then the card with the incorrect answer will be discarded from our original and that stack will shrink either way by one. 
    Our head pointer in trivial pursuit class will contain the a struct variable called "node" which will contain a "node * next" pointer, integer variable called top_index, and class variable pointer called "s_var." This will be the Linear Linked node that will contain the dynamically allocated arrays for our cards. Also, within trivial pursuit class, there will be a dummy answer variable since we do not want to read in within our queue, which contains private data. The max index for our stack will be ten and each card will contain three questions and answers. There will be global constant integer variable set equal to ten. Within each element of the dynamic array of cards, there will be a pointer to a class called "stacked" which will in it's private section, pointers to a struct called "q_node" and this will be our CLL. Again, inside our stack class, there will be a "q_node" struct variable and class pointer variable called "queue." Within our CLL queue struct, which will be the CLL, there will be to two variables: (1) queue class variable called "q_obj" for our questions and answers, which are present in the private section of the qeueu clas (2) self-referencing variable called "next." Then lastly, there will be a queue class called "queue" which will contain the normal function related to queue's and in the private section there will be character pointers called: (1) question_1 (2) question_2 (3) question_3 (4) answer_1 (5) answer_2 (6) answer_7 (7) trivial pursuit class variable called "t_pursuit" which will help compare answers from the get character function present within the trivial pursuit class. 
    For trivial pursuit class these are the following memeber functions: (1) Get user's menu pick and the arguements will be integer variable for our switch case in main (2) Get user's answer the arguements will pass by reference the dummy answer variable. For stack class, it will have: (1) pop (2) push (3) peek (4) isempty (5) initialize stack. For our queue class, these will be the function: (1) enqueue (push) (2) dequeue (remove) (3) deque (peek). The argument for these have not been decided just yet do to me never having implemented a data structure like this.
    This is the general overview of program and the player can replay the game as long as they want to play. There will be no scoring system since that is left up the "application developers" but I will let the player know if the guess correctly or not. 
