Name: Armant Touche
Class: CS 163
Instructor: Karla Fant
Assignment: Program #1 Efficiency Write-up

    I choose LLL with dynamically allocated arrays for storing the foodcart information which does not have to be statically allocated before run-time, which provides a flexible data structure. The ADT is a new concept, which from my understanding is about collection of data and set operations associated with the data. Hiding the head pointer inside the List function provide information encapsulation and did not allow the client program, main, to have access to the LLL which adheres to ADT principles of information hiding. I had to make sure to construct my structs containing the data members to ensure they are not pointing to garbage memory else where. When the program went into scope of my object Foodcart, there were no bad pointers and when I went out of scope of the program, I made sure to destruct appropiately to prevent memory leaks. Although, the way I implemented my add-favorite-food function, I may have made an error in error handling which resulted in buffer issues. I am still learning how to error handling or better implement my node-mutator functions or ADT's functions.
    For this first program, I think learning ADT and using LLL is appropiate because there isn't too many requirements in the program assignment background information that stated anything else but I may be wrong in using different data structure. I think the flexible length is an addtive advantage to using LLL but is horrible when it comes to deleting and traversing the LLL to search for a match. Efficiency within in program could be better but with time restrictions, I think I hid my information inputted from the client program appropiately because I never read-in within the same object containing the head pointer which is what I think is the basic requirement for program #1. My Delete Foodcart function was the better of them all because keeping the linkage in the LLL intact isn't a hard concept. I did not count the number of fetch operations and I only implemented one function as a recursive function. I could have implemented a recursive function for the display foodcart function but I did not due to time constraints and such. I could have spent more time stepwise refining each part of the ADT's function to optimize effciency but I did not. 
    I think my Delete favorite food function and Add favorite food may have some bugs because I noticed that I able to accidentally create empty nodes for odd reason. The client program may create nodes with no information within them. I noticed this bug the day of it being due on Friday but I couldn't submit later. I could have spent more time on the program "application-side" but I feel that adhere to ADT principle of information hiding and sort-of alright function coupling. I was able to use Valgrind to track memory leaks and when I tested it, there were no memory leaks but after debugging after submission, I did not think to use it after "tripping" the bug within my Add and Delete favorite food function. I would be interested in the feedback for my assignment because I could use it. I do not know if the bug will be noticed or not but I want to follow up, perhaps to go over my mistakes. I would spend more time better implementing functions and debugging my program with GDB. The fact I did not learn how to use GDB till the week of the program being may have hindered me assuring the quality of the program but I will use GDB more as I move through this course and the future. Overall, I assume I did alright despite the Add and Delete favorite food bug.

