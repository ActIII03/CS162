Name: Armant Touche
Class: CS 163
Instructor: Karla Fant
Description: Program #5 Efficiency Write-up 

	Directed graph was the data structure chosen for program five and this data was well-suited for event to-do list seeing that task can be relate by time needed to be completed. I thought the adjacency list was a little hurdle to get over because the lack of prior exposure to graphs. At first, I was implicitly creating a weighted graph but realize that the assignment Karla prescribed to us required our graph to be directed and not weighted. The client application has no idea what type of data structure is being used to store their data. If it was not for the related-task requirement, I think a linear linked list would have been better suited for this assignment. I would have like to experiment more with graphs that dealt with locations, seeing maps come first tom mind when thinking of graphs. The algorithmic performance of the destructor was tedious but that is because I choose to delete iteratively and not recursively which is why my destructor is “ugly” to look at but meh. I wasn’t able to implement the destructor fully and correctly, resulting a segmentation fault when deleting the vertex list. I think my assignment quality was not good to me not allocating enough time to this assignment being final weeks. I didn’t prioritize this assignment which shows when the segmentation fault occurs when quitting the program. I also have memory leaks but that is expected with a bad destructor.
	If I had more time to complete this assignment, I implement a better destructor that actually works properly and not result in segmentation faults and no memory leaks. Graphs are kind of cool and I like the real-world implication of graphs especially with long./lat. data being the possible symbolic edge value used to associate other vertices in our linked list of vertices. I was looking at:

 http://pi.math.cornell.edu/~mec/Winter2009/RalucaRemus/Lecture2/lecture2.html

I like this example of a directed graph where the vertex are major ISP routers and the edges are the relational path between the routers. I would like to see how the two researchers map ISP’s router relationship designed and prototype’d their program. The efficiency of the find location function best and worst case performance of O(N) because the search starts at the first index and sequentially searches the list until a match is found which in our case of having a unsorted list, may be problematic when searching the graph’s vertex list. Also, for the display function, I could have done a nested recursive function call to improve performance but I implemented a vertex display iteratively and my display adjacent list was implemented recursively which was not hard implemented and I can see the display algorithm efficiency may be the best characteristic of graphs seeing how vertices can related to other vertices further down the linked list of vertices. Also, I can imagine the implementation for delete a vertex would be tedious. Also, I could not imagine sorting this data structure. Maybe sort by topology (i.e., relationship by edge) is the only sorting that takes place with graphs. The depth first search algorithm is still not well understood by me but I think once I take CS 299, I will get more practice hopefully with graphs at the end, seeing that trees are the most emphasized data structure here at Portland State University. I wonder what other ADT operation are implemented with graphs. The test cases were not fully thought through for each function for both client and ADT interface. I used Lab ten for guidance when thinking through what to check for except for the destructor. I mentioned it prior write-up’s but I wish the labs went more in depth, no pun intended, in regards to graph destructors. Otherwise, I like this assignment.
